version: '3.7'

services:
  grafana:
    build:
      context: grafana/
      args:
        GRAFANA_VERSION: $GRAFANA_VERSION
    hostname: grafana
    container_name: grafana
    ports:
      - 3000:3000
    volumes:
      - type: bind
        source: ./data/grafana
        target: /var/lib/grafana
      - type: bind
        source: ./grafana/config/grafana.ini
        target: /etc/grafana/grafana.ini
      - type: bind
        source: ./grafana/dashboards
        target: /etc/grafana/provisioning/dashboards
      - type: bind
        source: ./grafana/datasources
        target: /etc/grafana/provisioning/datasources
    networks:
      - monitoring-network

  prometheus:
    build:
      context: prometheus/
      args:
        PROMETHEUS_VERSION: $PROMETHEUS_VERSION
    hostname: prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - type: bind
        source: ./prometheus/config/prometheus.yml
        target: /etc/prometheus/prometheus.yml
        read_only: true
      - type: bind
        source: ./data/prometheus
        target: /prometheus
    networks:
      - monitoring-network

  alertmanager:
    build:
      context: alertmanager/
      args:
        ALERTMANAGER_VERSION: $ALERTMANAGER_VERSION
    hostname: alertmanager
    container_name: alertmanager
    ports:
      - "9093:9093"
    volumes:
      - type: bind
        source: ./alertmanager/config/alertmanager.yml
        target: /etc/alertmanager/alertmanager.yml
        read_only: true
      - type: bind
        source: ./data/alertmanager
        target: /alertmanager
    networks:
      - monitoring-network

  nodeexporter:
    build:
      context: node_exporter/
      args:
        NODEEXPORTER_VERSION: $NODEEXPORTER_VERSION
    hostname: nodeexporter
    container_name: nodeexporter
    ports:
      - "9100:9100"
    command:
      - '--path.rootfs=/host'
    pid: host
    restart: unless-stopped
    volumes:
      - type: bind
        source: ./data/node_exporter
        target: /host:ro,rslave
    networks:
      - monitoring-network

  gateway:
    build:
      context: gateway/
      args:
        NGINX_VERSION: $NGINX_VERSION
    hostname: gateway
    container_name: gateway
    command: "nginx -g 'daemon off;'"
    ports:
      - "8080:80"
      - "3100"
    volumes:
      - type: bind
        source: ./gateway/config/nginx.conf
        target: /etc/nginx/nginx.conf
        read_only: true
    networks:
      - monitoring-network

  loki-frontend:
    build:
      context: loki/
      args:
        LOKI_VERSION: $LOKI_VERSION
    hostname: loki-frontend
    container_name: loki-frontend
    command: "-config.file=/etc/loki/config.yaml -target=query-frontend -frontend.downstream-url=http://loki-read:3100"
    ports:
      - "3100"
    volumes:
      - type: bind
        source: ./loki/config/loki-config.yaml
        target: /etc/loki/config.yaml
        read_only: true
    networks:
      - monitoring-network

  loki-read:
    build:
      context: loki/
      args:
        LOKI_VERSION: $LOKI_VERSION
    hostname: loki-read
    container_name: loki-read
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - type: bind
        source: ./loki/config/loki-config.yaml
        target: /etc/loki/config.yaml
        read_only: true
    networks:
      - monitoring-network

  loki-write:
    build:
      context: loki/
      args:
        LOKI_VERSION: $LOKI_VERSION
    hostname: loki-write
    container_name: loki-write
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - type: bind
        source: ./loki/config/loki-config.yaml
        target: /etc/loki/config.yaml
        read_only: true
    networks:
      - monitoring-network

  promtail:
    build:
      context: promtail/
      args:
        PROMTAIL_VERSION: $PROMTAIL_VERSION
    hostname: promtail
    container_name: promtail
    command: -config.file=/etc/promtail/config.yaml
    ports:
      - "9080:9080"
    volumes:
      - type: bind
        source: ./promtail/config/promtail-local-config.yaml
        target: /etc/promtail/config.yaml
        read_only: true
      - type: bind
        source: ./data/test
        target: /var/log/
    networks:
      - monitoring-network

  minio:
    build:
      context: minio/
      args:
        MINIO_VERSION: $MINIO_VERSION
    hostname: minio
    container_name: minio
    environment:
      - MINIO_ACCESS_KEY=loki
      - MINIO_SECRET_KEY=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
    volumes:
      - type: bind
        source: ./data/minio
        target: /data
    networks:
      - monitoring-network

  # TEST
  log-generator:
    image: mingrammer/flog
    command:
      - --loop
      - --format=json
      - --number=10    # number of log lines to generate per second
      - --delay=100ms  # delay between log lines
      - --output=/var/log/generated-logs.txt
      - --overwrite
      - --type=log
    volumes:
      - type: bind
        source: ./data/test
        target: /var/log/

networks:
  monitoring-network:
    driver: bridge